#+LATEX_HEADER: \usepackage[margin=2cm]{geometry}
#+LATEX_HEADER: \usepackage[scaled]{helvet}
#+LATEX_HEADER: \renewcommand\familydefault{\sfdefault} 
#+LATEX_HEADER: \usepackage[T1]{fontenc}
#+BIND: org-export-publishing-directory "output"
#+OPTIONS: toc:nil
#+TITLE: Interpretador de código morse para microcontroladores da família 8051
#+AUTHOR: Guilherme Ormond Sampaio & Leon Ferreira Bellini

* Integrantes

| Nome                     |           RA |
|--------------------------+--------------|
| Guilherme Ormond Sampaio | 22.218.007-7 |
| Leon Ferreira Bellini    | 22.218.002-8 |
* Links
** Video
  Segue o link com a demonstração do funcionamento do projeto e explicação das subrotinas.

 - https://youtu.be/WXWiU6Fg1qQ
 
** GitHub
  Segue o link do projeto no GitHub, contendo todas as informações e commits do código.

 - https://github.com/sociedade-do-pastel/morssembly

* Descrição do Projeto
  Projetado como codificação para o envio de mensagens por pulso a grandes 
distâncias, o Código Morse mostrou-se de extrema importância exatamente por essa
encriptação, permitindo-o ser, além de universal, facilmente compreendido. Dispositivos 
para envio e interpretação de seus caracteres são, então, facilmente produzidos. 

#+ATTR_LATEX: :width 0.8\textwidth :placement [hp]
#+CAPTION: Lista de caracteres do Código Morse (SNODGRASS & CAMP)
#+NAME: fig:MORSE
[[./img/codigo_morsa.png]]
** Objetivos
  O objetivo geral do projeto é desenvolver um interpretador de código morse, ou
seja, um "conversor" de morse para caracteres do alfabeto latino. O projeto será 
exclusivo para microcontroladores da família 8051 e, por ter sua programação feita 
totalmente em /assembly/ para tal família, a portabilidade do mesmo é mínima.

Todas as simulações serão realizadas na IDE /edSim/, é recomendada a frequência
de atualização de 1KHz por motivos os quais serão detalhados.

Também é importante se notar que não são muitos os projetos que exploram tal tema,
ao menos os presentes na plataforma para /host/ de repositórios /git/ e controle de 
versionamento /GitHub/. No caso, apenas dois contendo as palavras-chave /morse/,
/assembly/ e  
*8051* foram achados, e um dos resultados é este próprio projeto. Deve-se exaltar 
que ambos os códigos-fonte são totalmente diferentes e isso pode ser comprovado 
ao realizar as devidas buscas e comparar as estruturas destes.

#+ATTR_LATEX: :placement [!h]
#+CAPTION: Interpretadores de morse em /assembly/ com o microcontrolador 8051 no /GitHub/.
#+NAME: fig:Interp
[[./img/interp.png]]

** O interpretador 
   O código para a distinção entre pontos e traços, os 
quais são as principais características da codificação do sistema é baseado
no quanto de tempo o usuário pressionou o botão ligado ao pino *P2.7* 
no teclado do simulador. O tempo em questão é de 16 milissegundos, tal métrica 
fora obtida do tempo padrão para ativar-se um botão em um jogo que trabalhe com 
60 /frames/ por segundo. Por se tratar de uma simulação, o tempo calculado para uma
situação real apenas serve como uma forma de determinar o padrão, este sendo
mais funcional quando o simulador está configurado para atualizar em 1MHz.
 O usuário *deve* apertar um outro botão (no caso o ligado ao P3.2) para que o 
programa entenda que seu caractere já foi digitado, permitindo o microcontrolador 
a interpretar a sequência recebida.

#+LATEX: \clearpage
** O "banco de dados"
   Todos os caracteres podem ser dispostos num grafo do tipo árvore. Dependendo 
da "pontuação" de cada caractere digitado, o ponteiro DPTR pode ser movimentado 
de acordo por entre os endereços onde os códigos dos caracteres podem ser encontrados
na memória. Estes códigos representam letras e números compatíveis com 
o /display/ LCD /Hitachi/ 44780 em seu modo de duas linhas.

#+ATTR_LATEX: :width 0.9\textwidth :placement [!h]
#+CAPTION: Árvore de caracteres do código morse
#+NAME: fig:MORSE_TREE
[[./img/arvre.png]]

   Os números grafados em vermelho representam a posição que ocupam na memória, partindo 
da posição 40 e seguinto até a posição 102. Caso seja necessária alguma alteração em 
suas posições, basta alterar o endereço inicial pelo comando /org/.


** O /output/
   Como dito anteriormente, inicialmente os caracteres serão dispostos no 
/display/ 44780, o qual possuí módulo na IDE /edsim/, quaisquer caracteres inválidos
serão substituídos por um /blankspace/ (ausência de caractere). Além disso, 
quando o usuário aperta apenas o botão da interrupção, a operação é contada
como invalida e um espaço é inserido, ou seja, funciona como uma barra de espaço.

#+ATTR_LATEX: :width 0.5\textwidth :placement [!h]
#+CAPTION: Módulo do edsim para LCD
#+NAME: fig:LCD
[[./img/lcd.png]]


#+ATTR_LATEX: :placement [!h]
#+CAPTION: Tabela de posições, caracteres e representação dos caracteres no LCD.
| memória | letra | representação | conteúdo (hex) |
|---------+-------+---------------+----------------|
|       0 | E     | .             |             45 |
|       1 | I     | . .           |             49 |
|       2 | S     | . . .         |             53 |
|       3 | H     | . . . .       |             48 |
|       4 | 5     | . . . . .     |             35 |
|       5 | 4     | . . . . -     |             34 |
|       6 | V     | . . . -       |             56 |
|       7 |       | . . . - .     |             20 |
|       8 | 3     | . . . - -     |             33 |
|       9 | U     | . . -         |             55 |
|      10 | F     | . . - .       |             46 |
|      11 |       | . . - . .     |             20 |
|      12 |       | . . - . -     |             20 |
|      13 |       | . . - -       |             20 |
|      14 |       | . . - - .     |             20 |
|      15 | 2     | . . - - -     |             32 |
|      16 | A     | . -           |             41 |
|      17 | R     | . - .         |             52 |
|      18 | L     | . - . .       |             4C |
|      19 |       | . - . . .     |             20 |
|      20 |       | . - . . -     |             20 |
|      21 |       | . - . -       |             20 |
|      22 | +     | . - . - .     |             2B |
|      23 |       | . - . - -     |             20 |
|      24 | W     | . - -         |             57 |
|      25 | P     | . - - .       |             50 |
|      26 |       | . - - . .     |             20 |
|      27 |       | . - - . -     |             20 |
|      28 | J     | . - - -       |             4A |
|      29 |       | . - - - .     |             20 |
|      30 | 1     | . - - - -     |             31 |
|      31 | START | 0             |             20 |
|      32 | 0     | - - - - -     |             30 |
|      33 | 9     | - - - - .     |             39 |
|      34 |       | - - - -       |             20 |
|      35 |       | - - - . -     |             20 |
#+LATEX: \clearpage
| memória | letra | representação | conteúdo (hex) |
|---------+-------+---------------+----------------|
|      36 | 8     | - - - . .     |             38 |
|      37 |       | - - - .       |             20 |
|      38 | O     | - - -         |             4F |
|      39 |       | - - . - -     |             20 |
|      40 |       | - - . - .     |             20 |
|      41 | Q     | - - . -       |             51 |
|      42 |       | - - . . -     |             20 |
|      43 | 7     | - - . . .     |             37 |
|      44 | Z     | - - . .       |             5A |
|      45 | G     | - - .         |             47 |
|      46 | M     | - -           |             4D |
|      47 |       | - . - - -     |             20 |
|      48 |       | - . - - .     |             20 |
|      49 | Y     | - . - -       |             59 |
|      50 |       | - . - . -     |             20 |
|      51 |       | - . - . .     |             BC |
|      52 | C     | - . - .       |             43 |
|      53 | K     | - . -         |             4B |
|      54 |       | - . . - -     |             20 |
|      55 | /     | - . . - .     |             2F |
|      56 | X     | - . . -       |             58 |
|      57 | =     | - . . . -     |             3D |
|      58 | 6     | - . . . .     |             36 |
|      59 | B     | - . . .       |             42 |
|      60 | D     | - . .         |             44 |
|      61 | N     | - .           |             4E |
|      62 | T     | -             |             54 |

#+LATEX: \clearpage
* Desenhos esquemáticos
Foram utilizados apenas o /display/ LCD e os /switches/ 7 (p2.7) e 0 (p3.2), 
servindo de botão para /input/ e interrupção respectivamente.

#+ATTR_LATEX: :width 0.9\textwidth :placement [!h]
#+CAPTION: Componentes simulados utilizados no projeto. (Autor.)
#+NAME: fig:Componentes
[[./img/screenshot.png]]





#+LATEX: \clearpage
* Fluxograma ou Diagrama
Por "ignorar" o curso de qualquer operação do programa,
um fluxograma para a interrupção externa foi definido separadamente.

** Programa principal
#+ATTR_LATEX: :width 0.91\textwidth :placement [!h]
#+CAPTION: Funcionamento do programa principal (Autor.)
#+NAME: fig:flux-main
[[./img/fluxograma-main.png]]


#+LATEX: \newpage
** Interrupção externa
#+ATTR_LATEX: :placement [!h]
#+CAPTION: Funcionamento da interrupção externa (Autor.)
#+NAME: fig:flux-ext
[[./img/fluxograma-interrupcao.png]]


#+LATEX: \newpage 
#+LATEX: \clearpage
* Código-fonte
O código-fonte do projeto tem mais de 200 linhas e foi desenvolvido no curso de 
uma semana. Nele são usadas /labels/ para cada pino relevante para o projeto. 
Devido a dificuldades relacionadas ao fim do semestre letivo, não foi possível 
promover a otimização do código. Foram-se utilizados, contanto, os 
diferentes métodos de *CALL* e *JMP* para as apropriadas situações.


#+ATTR_LATEX: :small 
#+BEGIN_SRC asm
  BOTAO  EQU p2.7	
  ;; vou mudar o RS e E do edsim
  ;; não precisamos trabalhar com 4 bit
  RS     EQU p0.0
  ENABLE EQU p0.1
  DB0    EQU p1.0
  DB1    EQU p1.1        
  DB2    EQU p1.2
  DB3    EQU p1.3
  DB4    EQU p1.4
  DB5    EQU p1.5
  DB6    EQU p1.6
  DB7    EQU p1.7
  DADOS  EQU p1
  ;; REGISTRADOR PARA ENVIAR 
  ;; DADOS AO LCD
  REGLCD EQU R7 
  ;; registradores para verificar a entrada
  ENTR   EQU R6
  ENDR   EQU R5

  org 0h
  INICIO:
	  LJMP MAIN_LOOP

  ;; interrupção externa força reset
  ;; e "empurra" caractere atual no lcd
  org 0Bh
  PUSHLCD:
	  LCALL PEGAR_ENDR
	  LCALL OPERAR_LCD		
	  LCALL ZERAR
	  DJNZ 0X7D, CHECK_LCD
	  SJMP LIMPAR_LCD
  VOLTA_LCD:
	  RETI

  org 23h
  CHECK_LCD:
	  MOV A, 0X7D
	  CJNE A, #16, NOT_EQUAL
	  ACALL SEG_LINHA
	  NOP 
  NOT_EQUAL:
	  SJMP VOLTA_LCD
  LIMPAR_LCD:
	  SETB ENABLE
	  CLR RS
	  ;; instrução para limpar o disp
	  MOV DADOS, #01H
	  CLR ENABLE
	  LCALL ESPERA
	  MOV 0X7D, #32
	  SJMP VOLTA_LCD
  SEG_LINHA:
	  SETB ENABLE
	  CLR RS
	  ;; move para a posição 40 do disp
	  MOV DADOS, #0C0h 
	  CLR ENABLE
	  LCALL ESPERA
	  RET
  CONTINHAS:
	  ;; gravar o tempo que ficou apertado
	  CLR C
	  CLR OV	
	  MOV A, TL0
	  SUBB A, R3 ;; inutil talvez?
	  ;; A - R3 ainda produziria carry
	  MOV A, TH0
	  SUBB A, R2 ;; se setar ACC, é menor?
	  JC MENOR
	  MOV ENTR, #1 ;; 1 indica linha
  VOLTA:	
	  LJMP ATT_ENDR

  MENOR:
	  MOV ENTR, #0 ;; 0 indica clique
	  LJMP VOLTA

  MAIN_LOOP:
	  LCALL INIT_LCD
	  MOV TMOD, #00001001h 
	  ;; interesse está no tempo apertado
	  MOV TH0, #0
	  MOV TL0, #0
	  ;; 16MS é 3e80 (16bits) 
	  MOV R2, #0X3E 
	  MOV R3, #0X80
	  MOV 0x7D, #32
	  SETB EA
	  SETB IT0
	  SETB EX0
	  MOV ENDR, #31 ;; endereço inicial
	  ;; R4 indica se o inserido é o
	  ;; primeiro ou não
	  MOV R4, #1 
	  ;; R0 será usado em operações de endereço
	  MOV R0, #32
  CONTROLE:
	  JB BOTAO, $
	  ACALL TEMP
	  JNB BOTAO, $
	  ACALL TEMP
	  LJMP CONTINHAS 
  ATT_ENDR:
	  CLR C ;; limpa carry
	  ;; verifica se é o primeiro pelo R4
	  MOV A, R4 
	  JNZ PRIMEIRO 
	  ;; verifica se deve ir pelo caminho
	  ;; positivo ou negativo pelo R1
	  MOV A, R1
	  JNZ NEG
  POS:
	  MOV A, ENTR
	  JNZ DIR_POS
  ESQ_POS:
	  INC ENDR
	  LJMP FINAL
  DIR_POS:
	  MOV A, ENDR
	  ADD A, R0
	  MOV ENDR, A
	  AJMP FINAL
  NEG:
	  MOV A, ENTR
	  JNZ DIR_NEG
  ESQ_NEG:
	  DEC ENDR
	  LJMP FINAL
  DIR_NEG:
	  CLR C
	  MOV A, ENDR
	  SUBB A, R0
	  MOV ENDR, A
	  AJMP FINAL
  PRIMEIRO:
	  MOV R4, #0 ;; R4 != 0 não é mais primeiro
	  MOV A, ENTR
	  JNZ PRI_DIREITA
  PRI_ESQUERDA:
	  MOV R1, #0 ;; R1 = 0 operações positivas
	  MOV A, ENDR
	  SUBB A, #31
	  MOV ENDR, A
	  AJMP FINAL
  PRI_DIREITA:
	  MOV R1, #1 ;; R1 = 1 operações negativas
	  MOV A, ENDR
	  ADD A, #31
	  MOV ENDR, A
  FINAL:
	  MOV A, R0
	  MOV B, #2
	  DIV AB 
	  MOV R0, A
	  ACALL ZERAR
	  SJMP CONTROLE
  ;; subrotina para zerar temporizador
  ZERAR:
	  MOV TH0, #0
	  MOV TL0, #0
	  RET
  ;; simplesmente copia o caractere atual
  ;; para o display
  OPERAR_LCD:
	  SETB ENABLE
	  SETB RS
	  MOV DADOS, REGLCD
	  CLR ENABLE
	  ACALL ESPERA
	  RET 

  TEMP: 
	  CPL TR0
	  RET


  INIT_LCD:
	  ;; forçar borda de descida
	  SETB ENABLE
	  CLR RS
	  ;; iniciar como display de 2 linhas
	  ;; e 8 bit
	  MOV DADOS, #38h
	  CLR ENABLE
	  ACALL ESPERA 
	  SETB ENABLE
	  CLR RS
	  MOV DADOS, #0Eh
	  CLR ENABLE
	  ACALL ESPERA
	  SETB ENABLE
	  CLR RS
	  MOV DADOS, #06h
	  CLR ENABLE
	  ACALL ESPERA
	  RET

  ESPERA:
	  ;; valor aleatório da ram
	  ;; delay alto? datasheet diz 40us
	  MOV 0X7F, #0x40
	  DJNZ 0X7F, $
	  MOV 0X7F, #0x40
	  RET

  org 10Fh
  PEGAR_ENDR:
	  MOV A, R5
	  MOV DPTR,#TABELA
	  MOVC A,@A+DPTR
	  MOV REGLCD,A
  RESET_ENDR:
	  MOV R4, #1
	  MOV R0, #32
	  MOV ENDR, #31
	  RET
  TABELA:
	  DB 45h, 49h, 53h, 48h, 35h, 34h, 56h, 20h, 33h, 55h, 46h, 20h, 
	  20h, 20h, 20h, 32h, 41h, 52h, 4Ch, 20h, 20h, 20h, 2Bh, 20h, 57h, 
	  50h, 20h, 20h, 4Ah, 20h, 31h, 20h, 30h, 39h, 20h, 20h, 38h, 20h, 4Fh, 
	  20h, 20h, 51h, 20h, 37h, 5Ah, 47h, 4Dh, 20h, 20h, 59h, 20h, BCh, 43h, 
	  4Bh, 20h, 2Fh, 58h, 3Dh, 36h, 42h, 44h, 4Eh, 54h

#+END_SRC

#+LATEX: \clearpage
* Imagens da simulação realizada na IDE
** Digitando uma frase
Aqui, o usuário insere a frase "/Praise the sun/", apertando os códigos 
específicos de cada caractere e sinalizando o término da "digitação" 
com o botão 0 (interrupção externa).


#+ATTR_LATEX: :width 0.9\textwidth :placement [!h]
#+CAPTION: Usuário inserindo a frase "/Praise the sun/" (Autor.)
#+NAME: fig:Frase
[[./img/praise_the_sun.png]]
#+LATEX: \clearpage
** Quando o limite de caracteres do /display/ é atingido
Logo após o usuário inserir 31 caracteres. O /display/ LCD é limpado, 
uma vez que a sub-rotina *LIMPA_LCD* é chamada. Também é realizada uma 
checagem para forçar o cursor a funcionar na segunda linha.

#+ATTR_LATEX: :width 0.9\textwidth :placement [!h]
#+CAPTION: O display reseta quando os 31 caracteres são preenchidos. (Autor.)
#+NAME: fig:TelaAntes
[[./img/antes.png]]

#+ATTR_LATEX: :width 0.9\textwidth
#+CAPTION: O reset em ação. (Autor.)
#+NAME: fig:TelaDepois
[[./img/depois.png]]

#+LATEX: \clearpage
* Bibliografia
 -  8051PROJECTS. *LCD Interfacing*. Disponível em: https://www.8051projects.info/lcd.php. Acesso em: 7 maio 2020.
 -  RAVI. *8051 Microcontroller Assembly Language Programming*. Disponível em: https://www.electronicshub.org/8051-microcontroller-assembly -language-programming/. Acesso em: 7 maio 2020.
